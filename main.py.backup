# main.py
"""
DocAI - RAG Application Main Entry Point

FastAPI application factory with:
- RESTful API routing (/api/v1)
- Legacy compatibility routing (/upload-pdf, /chat)
- Static files serving
- Frontend serving (template/index.html)
- Startup/Shutdown lifecycle management
"""

import logging
from contextlib import asynccontextmanager
from pathlib import Path

from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware

# Import configuration
from app.core.config import settings

# Import API routers
from app.api.v1 import router as api_v1_router

logger = logging.getLogger(__name__)


# =============================================================================
# Lifespan Management
# =============================================================================

@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Application lifespan management

    Handles:
    - Startup: Database initialization, directory creation
    - Shutdown: Resource cleanup
    """
    # Startup
    logger.info(f"=ï¿½ Starting {settings.APP_NAME} v{settings.APP_VERSION}")

    # Create necessary directories
    directories = [
        Path(settings.UPLOAD_DIR),
        Path(settings.PDF_UPLOAD_DIR),
        Path("data"),
        Path("logs"),
        Path("static")
    ]

    for directory in directories:
        directory.mkdir(parents=True, exist_ok=True)
        logger.info(f"=ï¿½ Ensured directory exists: {directory}")

    # Initialize database tables
    try:
        from app.Providers.file_metadata_provider import get_file_metadata_provider
        file_metadata_provider = await get_file_metadata_provider()
        await file_metadata_provider.initialize_database()
        logger.info(" SQLite database initialized")
    except Exception as e:
        logger.error(f"L Failed to initialize database: {str(e)}")

    logger.info(" Application startup complete")

    yield  # Application runs here

    # Shutdown
    logger.info("=ï¿½ Shutting down application")

    # Close database connections
    try:
        from app.Providers.chat_history_provider import _chat_history_provider_instance
        if _chat_history_provider_instance:
            await _chat_history_provider_instance.close()
            logger.info(" MongoDB connection closed")
    except Exception as e:
        logger.warning(f"ï¿½ MongoDB cleanup warning: {str(e)}")

    logger.info(" Application shutdown complete")


# =============================================================================
# Application Factory
# =============================================================================

def create_application() -> FastAPI:
    """
    Create and configure FastAPI application

    Returns:
        Configured FastAPI application instance
    """
    app = FastAPI(
        title=settings.APP_NAME,
        version=settings.APP_VERSION,
        description="RAG-powered document Q&A system with hierarchical chunking and OPMP streaming",
        lifespan=lifespan,
        debug=settings.DEBUG
    )

    # =============================================================================
    # CORS Middleware
    # =============================================================================
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],  # Configure appropriately for production
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

    # =============================================================================
    # Static Files
    # =============================================================================
    # Mount static files directory
    static_dir = Path("static")
    if static_dir.exists():
        app.mount("/static", StaticFiles(directory="static"), name="static")
        logger.info("=ï¿½ Static files mounted at /static")

    # =============================================================================
    # API Routers - RESTful Architecture
    # =============================================================================
    # Register v1 API router (RESTful: /api/v1/...)
    app.include_router(
        api_v1_router.router,
        prefix="/api"
    )
    logger.info("= RESTful API v1 registered at /api/v1")

    # =============================================================================
    # Legacy Compatibility Routers
    # =============================================================================
    # Import individual endpoint routers for legacy compatibility
    from app.api.v1.endpoints import upload, chat

    # Legacy upload endpoint: /upload-pdf/ (frontend compatibility)
    app.include_router(
        upload.router,
        prefix="/upload-pdf",
        tags=["upload-legacy"]
    )
    logger.info("= Legacy upload endpoint registered at /upload-pdf")

    # Legacy chat endpoint: /chat/ (frontend compatibility)
    app.include_router(
        chat.router,
        prefix="/chat",
        tags=["chat-legacy"]
    )
    logger.info("ðŸ”Œ Legacy chat endpoint registered at /chat")

    # =============================================================================
    # Frontend Routes
    # =============================================================================

    @app.get("/", response_class=HTMLResponse, tags=["frontend"])
    async def serve_frontend():
        """
        Serve main frontend interface

        Returns:
            HTML content from template/index.html
        """
        try:
            html_path = Path("template/index.html")
            if not html_path.exists():
                return HTMLResponse(
                    content="<h1>Frontend not found</h1><p>Please ensure template/index.html exists.</p>",
                    status_code=404,
                    media_type="text/html; charset=utf-8"
                )

            html_content = html_path.read_text(encoding='utf-8')
            return HTMLResponse(
                content=html_content,
                media_type="text/html; charset=utf-8"
            )

        except Exception as e:
            logger.error(f"Failed to serve frontend: {str(e)}")
            return HTMLResponse(
                content=f"<h1>Error loading frontend</h1><p>{str(e)}</p>",
                status_code=500,
                media_type="text/html; charset=utf-8"
            )

    @app.get("/health", tags=["system"])
    async def health_check():
        """
        Health check endpoint

        Returns:
            System health status
        """
        return JSONResponse(content={
            "status": "healthy",
            "app_name": settings.APP_NAME,
            "version": settings.APP_VERSION
        })

    return app


# =============================================================================
# Application Instance
# =============================================================================

app = create_application()


# =============================================================================
# Main Entry Point (for direct execution)
# =============================================================================

if __name__ == "__main__":
    import uvicorn

    # Configure logging
    logging.basicConfig(
        level=logging.INFO if not settings.DEBUG else logging.DEBUG,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    # Run application
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=settings.DEBUG,
        log_level="info"
    )
